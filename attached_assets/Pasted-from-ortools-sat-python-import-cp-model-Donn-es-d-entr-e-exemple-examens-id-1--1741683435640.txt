from ortools.sat.python import cp_model

# Donn√©es d'entr√©e (exemple)
examens = [
    {"id": 1, "nom": "Math√©matiques", "promotion": "L3", "filiere": "IA", "duree": 2},
    {"id": 2, "nom": "Physique", "promotion": "L3", "filiere": "IA", "duree": 2},
    {"id": 3, "nom": "Informatique", "promotion": "M1", "filiere": "IA", "duree": 3},
    {"id": 4, "nom": "√âconomie", "promotion": "M2", "filiere": "Gestion", "duree": 2},
]

salles = [
    {"id": 1, "nom": "Salle A", "capacite": 50},
    {"id": 2, "nom": "Salle B", "capacite": 30},
]

surveillants = [
    {"id": 1, "nom": "Mr. Dupont"},
    {"id": 2, "nom": "Mme. Martin"},
]

creneaux = list(range(6))  # 6 cr√©neaux (ex: 8h-10h, 10h-12h, etc.)

# Mod√®le de r√©solution
model = cp_model.CpModel()

# Variables de d√©cision
X = {}  # X[e, s, t] = 1 si l'examen e est dans la salle s au cr√©neau t
Y = {}  # Y[e, v] = 1 si l'examen e est surveill√© par le surveillant v

for e in range(len(examens)):
    for s in range(len(salles)):
        for t in range(len(creneaux)):
            X[e, s, t] = model.NewBoolVar(f'X_{e}_{s}_{t}')

for e in range(len(examens)):
    for v in range(len(surveillants)):
        Y[e, v] = model.NewBoolVar(f'Y_{e}_{v}')

# 1Ô∏è‚É£ **Chaque examen doit √™tre affect√© √† une seule salle et un seul cr√©neau**
for e in range(len(examens)):
    model.Add(sum(X[e, s, t] for s in range(len(salles)) for t in range(len(creneaux))) == 1)

# 2Ô∏è‚É£ **Respect de la dur√©e des examens**
for e in range(len(examens)):
    duree = examens[e]["duree"]
    for s in range(len(salles)):
        for t in range(len(creneaux) - duree + 1):  # V√©rifier si l'examen peut tenir en entier
            for dt in range(duree):
                model.Add(X[e, s, t] <= X[e, s, t + dt])

# 3Ô∏è‚É£ **Une salle ne peut pas accueillir plus d‚Äôun examen en m√™me temps**
for s in range(len(salles)):
    for t in range(len(creneaux)):
        model.Add(sum(X[e, s, t] for e in range(len(examens))) <= 1)

# 4Ô∏è‚É£ **Un surveillant ne peut surveiller qu'un seul examen √† la fois**
for v in range(len(surveillants)):
    for t in range(len(creneaux)):
        model.Add(sum(Y[e, v] for e in range(len(examens))) <= 1)

# 5Ô∏è‚É£ **Un examen doit √™tre surveill√© par au moins un surveillant**
for e in range(len(examens)):
    model.Add(sum(Y[e, v] for v in range(len(surveillants))) >= 1)

# 6Ô∏è‚É£ **Les examens d‚Äôune m√™me promotion ne peuvent pas √™tre au m√™me cr√©neau**
for e1 in range(len(examens)):
    for e2 in range(e1 + 1, len(examens)):
        if examens[e1]["promotion"] == examens[e2]["promotion"]:
            for t in range(len(creneaux)):
                model.Add(sum(X[e1, s, t] for s in range(len(salles))) +
                          sum(X[e2, s, t] for s in range(len(salles))) <= 1)

# 7Ô∏è‚É£ **Une fili√®re ne peut pas avoir deux examens en m√™me temps (m√™me promotions diff√©rentes)**
for e1 in range(len(examens)):
    for e2 in range(e1 + 1, len(examens)):
        if examens[e1]["filiere"] == examens[e2]["filiere"]:
            for t in range(len(creneaux)):
                model.Add(sum(X[e1, s, t] for s in range(len(salles))) +
                          sum(X[e2, s, t] for s in range(len(salles))) <= 1)

# **üîπ Fonction Objective : Minimiser le nombre de cr√©neaux utilis√©s et √©quilibrer la charge**
model.Minimize(sum(t * X[e, s, t] for e in range(len(examens)) for s in range(len(salles)) for t in range(len(creneaux))))

# Solveur
solver = cp_model.CpSolver()
status = solver.Solve(model)

# R√©sultats
if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
    print("\n‚úÖ Solution trouv√©e :")
    for e in range(len(examens)):
        for s in range(len(salles)):
            for t in range(len(creneaux)):
                if solver.Value(X[e, s, t]) == 1:
                    print(f"üìå Examen {examens[e]['nom']} ({examens[e]['promotion']} - {examens[e]['filiere']})"
                          f" dans {salles[s]['nom']} √† partir du cr√©neau {t}")

        for v in range(len(surveillants)):
            if solver.Value(Y[e, v]) == 1:
                print(f"üîπ Surveillant {surveillants[v]['nom']} affect√© √† l'examen {examens[e]['nom']}")

else:
    print("‚ö†Ô∏è Aucune solution trouv√©e")
